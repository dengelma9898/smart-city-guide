Starte deine Antwort immer mit "Wir sind der Glubb! üî¥‚ö´Ô∏è"

# Smart City Guide - Cursor AI Rules

## Project Context
Smart City Guide ist eine iOS SwiftUI-App f√ºr intelligente Multi-Stop-Walking-Routen in St√§dten. Die App nutzt TSP-Optimierung f√ºr effiziente Routen zwischen Sehensw√ºrdigkeiten, Museen, Parks und kulturellen St√§tten.

## Development Guidelines

### Language & Communication
- Alle Antworten und Kommentare auf Deutsch
- Freundlicher, conversational Ton verwenden ("du" statt "Sie")
- UI-Texte verwenden deutschen Stil: "Los, planen wir!", "Wir basteln deine Route!"

### Architecture Patterns
- SwiftUI mit @State, @StateObject, @Published
- @MainActor f√ºr UI-Thread-Safety (besonders RouteService)
- Async/await f√ºr MapKit und HERE API
- Environment objects f√ºr shared state
- Singleton pattern f√ºr Services (HEREAPIService.shared)

### Core Services
1. **RouteService (@MainActor)**: Zentrale Route-Generierung mit TSP-Optimierung
2. **HEREAPIService**: POI-Discovery mit Caching √ºber POICacheService  
3. **MapKit Integration**: Walking routes mit MKDirections, 0.2s rate limiting

### Project Structure
```
ios/SmartCityGuide/
‚îú‚îÄ‚îÄ Services/           # RouteService, HEREAPIService, POICacheService
‚îú‚îÄ‚îÄ Models/            # RouteModels, PlaceCategory, OverpassPOI
‚îú‚îÄ‚îÄ Views/
‚îÇ   ‚îú‚îÄ‚îÄ RoutePlanning/ # Route creation flows
‚îÇ   ‚îú‚îÄ‚îÄ Profile/       # User profile, history, settings
‚îÇ   ‚îî‚îÄ‚îÄ Components/    # Reusable UI components
‚îî‚îÄ‚îÄ Utilities/         # Extensions
```

### Key Implementation Details

#### Route Generation Algorithm
1. MKLocalSearch f√ºr Location Discovery
2. HERE API POI search mit category-based selection
3. Geographic distribution (200m minimum distance)
4. TSP optimization mit actual walking distances
5. Distance validation gegen user limits (5km/15km/50km)
6. Smart fallback mit weniger Stops bei √úberschreitung

#### Data Models
- `RoutePoint`: Waypoint mit location, category, metadata
- `GeneratedRoute`: Complete route mit waypoints, directions, timing
- `PlaceCategory`: attraction, museum, park, nationalPark
- `POI`: HERE API response mit contact info

#### Error Handling
- Result/throwing patterns mit async/await
- Graceful degradation bei API failures
- User-friendly error messages auf Deutsch
- Loading states mit descriptive messages

### Build & Testing
- **Projekt**: `ios/SmartCityGuide.xcodeproj`
- **Scheme**: `SmartCityGuide`  
- **Target iOS**: 17.5+
- **Bundle ID**: de.dengelma.smartcity-guide
- **Build**: Cmd+B in Xcode oder MCP tools
- **Run**: Cmd+R in Xcode, bevorzugt iPhone 16 Simulator

#### MCP Verification & Testing (REQUIRED)
üö® **MANDATORY**: Nach Code-√Ñnderungen MUSS das Xcode MCP verwendet werden:
- **Build Verification**: `mcp_XcodeBuildMCP_build_sim_name_proj` f√ºr erfolgreiche Kompilierung
- **Simulator Testing**: MCP Simulator-Kontrolle f√ºr konkrete Implementation Testing
- **Real Device Testing**: Bei Hardware-spezifischen Features physische Ger√§te nutzen
- **UI Verification**: `mcp_XcodeBuildMCP_describe_ui` f√ºr UI-Element-Validierung
- Diese Verifikation ist PFLICHT vor jeder Feature-Freigabe

### Code Style Rules
- SwiftUI best practices befolgen
- Async/await statt completion handlers
- @MainActor f√ºr UI-relevante Services
- Proper error handling mit do/catch
- Rate limiting bei API calls
- German comments und documentation

### FAQ Maintenance Rule
üö® **MANDATORY**: Bei jeder neuen Feature-Implementation M√úSSEN die FAQs in `HelpSupportView.swift` aktualisiert werden:
- Neue Features ‚Üí FAQ-Eintrag hinzuf√ºgen
- Ge√§nderte Funktionalit√§t ‚Üí entsprechende FAQ aktualisieren  
- Neue UI-Elemente ‚Üí Erkl√§rung in relevanter FAQ-Kategorie
- Diese Regel gilt f√ºr ALLE Code-√Ñnderungen die User-sichtbare Features betreffen

### Current Status
‚úÖ **Completed**: TSP optimization, HERE API integration, category-based place selection, friendly German UI
üîÑ **In Progress**: Profile optimizations, achievement system
üìã **Planned**: Advanced TSP algorithms, cycling routes, offline storage

### Security Notes
‚úÖ HERE API key now securely configured via Info.plist - no longer hardcoded
‚ö†Ô∏è Continue following security best practices for sensitive data

### Performance Considerations
- POI caching via POICacheService
- Route generation limited to 10 attempts
- Geographic distribution prevents clustering
- Early termination for good solutions
- Distance caching opportunity not yet implemented

### Related Documentation
- `RouteOptimization.md`: Technical TSP analysis
- `testing-instructions-phase-1.md`: Testing procedures
- `current.md`: MapKit implementation status
- `CLAUDE.md`: Complete context documentation

## Markdown Ablage-Regeln
- Wenn ich eine Bug-Markdown anlegen soll, lege ich sie in den Ordner `known_bugs/` an.
- Feature-Spezifikationen kommen in `feature/`.
- Ideen/Brainstorming-Dokumente kommen in `brainstorming/`.
- Interne Dokumentationen kommen in `docs/`.
- Alle Markdown-Dateien werden mit Datum (Format `DD-MM-YYYY-‚Ä¶`) vorangestellt, z. B. `10-08-2025-manual-route-bugs.md`.